package components

import (
	"fmt"
	"github.com/axzilla/goilerplate/pkg/utils"
	"strings"
)

// AvatarSize defines the available avatar dimensions
type AvatarSize string

const (
	// AvatarSizeSmall renders a small avatar (32x32px)
	AvatarSizeSmall AvatarSize = "small"

	// AvatarSizeMedium renders a medium avatar (48x48px)
	AvatarSizeMedium AvatarSize = "medium"

	// AvatarSizeLarge renders a large avatar (64x64px)
	AvatarSizeLarge AvatarSize = "large"
)

type AvatarProps struct {
	// ImageSrc is the URL for the avatar image
	// If empty, initials will be shown instead
	ImageSrc string

	// Name is used to generate initials when no image is provided
	Name string

	// Size controls the avatar dimensions (small, medium, large)
	Size AvatarSize

	// Class adds custom CSS classes
	Class string

	// Attributes for additional HTML attributes
	Attributes templ.Attributes
}

// AvatarInitials generates a 1-2 character initial from the given name
func AvatarInitials(name string) string {
	parts := strings.Fields(name)
	initials := ""
	for i, part := range parts {
		if i > 1 {
			break
		}
		if len(part) > 0 {
			initials += string(part[0])
		}
	}
	return strings.ToUpper(initials)
}

// AvatarSizeClasses maps sizes to their corresponding CSS classes
func AvatarSizeClasses(size AvatarSize) string {
	switch size {
	case AvatarSizeSmall:
		return "w-8 h-8 text-xs"
	case AvatarSizeLarge:
		return "w-16 h-16 text-xl"
	default:
		return "w-12 h-12 text-base"
	}
}

// Avatar renders a circular image or initials for user representation.
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/avatar
//
// Props:
// - ImageSrc: URL for the avatar image
// - Name: Text to generate initials from when no image is provided
// - Size: Avatar dimensions (small, medium, large)
// - Class: Additional CSS classes
// - Attributes: Additional HTML attributes
templ Avatar(props AvatarProps) {
	<div
		class={
			utils.TwMerge(
				"inline-flex items-center justify-center rounded-full bg-muted",
				AvatarSizeClasses(props.Size),
				props.Class,
			),
		}
		{ props.Attributes... }
	>
		if props.ImageSrc != "" {
			<img
				src={ props.ImageSrc }
				alt={ fmt.Sprintf("%s's avatar", props.Name) }
				class="w-full h-full object-cover rounded-full"
			/>
		} else {
			<span class="font-medium text-muted-foreground">
				{ AvatarInitials(props.Name) }
			</span>
		}
	</div>
}
