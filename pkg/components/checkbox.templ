package components

import (
	"github.com/axzilla/goilerplate/pkg/icons"
	"github.com/axzilla/goilerplate/pkg/utils"
)

type CheckboxProps struct {
	// ID uniquely identifies the checkbox input
	ID string

	// Name sets the form field name
	Name string

	// Value sets the checkbox value
	Value string

	// Label displays text next to checkbox
	// Empty string hides the label
	Label string

	// Class adds custom CSS classes
	Class string

	// Attributes for additional HTML attributes and Alpine.js bindings
	Attributes templ.Attributes
}

// Checkbox renders a styled checkbox input with optional label.
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/checkbox
//
// Props:
// - ID: Unique identifier for the input
// - Name: Form field name
// - Value: Checkbox value
// - Label: Optional text label
// - Class: Additional CSS classes
// - Attributes: Additional HTML attributes
templ Checkbox(props CheckboxProps) {
	<label
		for={ props.ID }
		class={ utils.TwMerge(
            "flex cursor-pointer items-center gap-2 text-sm font-medium",
            "text-muted-foreground [&:has(input:checked)]:text-foreground",
            "[&:has(input:disabled)]:opacity-50 [&:has(input:disabled)]:cursor-not-allowed",
            props.Class,
        ) }
	>
		<div class="relative flex items-center">
			<input
				id={ props.ID }
				name={ props.Name }
				value={ props.Value }
				type="checkbox"
				class="before:content[''] peer relative size-4 cursor-pointer appearance-none overflow-hidden 
                       rounded-sm border border-2 border-primary
                       bg-background before:absolute before:inset-0 
                       checked:before:bg-primary
                       focus:outline focus:outline-2 focus:outline-offset-2 
                       focus:outline-ring checked:focus:outline-primary 
                       active:outline-offset-0 
                       disabled:cursor-not-allowed
                       transition-colors"
				{ props.Attributes... }
			/>
			<div
				class="pointer-events-none invisible absolute left-1/2 top-1/2 size-3 
                        -translate-x-1/2 -translate-y-1/2 text-primary-foreground 
                        peer-checked:visible"
			>
				@icons.Check(icons.IconProps{Size: "12"})
			</div>
		</div>
		if props.Label != "" {
			<span>{ props.Label }</span>
		}
	</label>
}
