package components

import (
	"github.com/axzilla/goilerplate/pkg/utils"
	"strings"
)

// ButtonVariant defines the available button styles
type ButtonVariant string

// ButtonSize defines the available button dimensions
type ButtonSize string

const (
	// Button style variants
	Default     ButtonVariant = "default"     // Primary action button
	Destructive ButtonVariant = "destructive" // Dangerous/warning action
	Outline     ButtonVariant = "outline"     // Bordered button
	Secondary   ButtonVariant = "secondary"   // Less prominent action
	Ghost       ButtonVariant = "ghost"       // Minimal styling
	Link        ButtonVariant = "link"        // Appears as a text link

	// Button sizes
	Md         ButtonSize = "md"   // Standard size
	Sm         ButtonSize = "sm"   // Compact size
	Lg         ButtonSize = "lg"   // Large size
	ButtonIcon ButtonSize = "icon" // Square icon button
)

type ButtonProps struct {
	// Class adds custom CSS classes
	Class string

	// Text contains the button label
	Text string

	// Variant controls the button styling
	Variant ButtonVariant

	// Size controls button dimensions
	Size ButtonSize

	// FullWidth makes button expand to container width
	FullWidth bool

	// Href turns the button into a link
	Href string

	// Target controls link opening behavior
	Target string

	// Disabled controls interactive state (bool or JS expression)
	Disabled any

	// Type sets the button type attribute
	Type string

	// Attributes for additional HTML attributes
	Attributes templ.Attributes

	// IconLeft displays an icon before text
	IconLeft templ.Component

	// IconRight displays an icon after text
	IconRight templ.Component
}

// variantClasses maps variants to their CSS classes
func (b ButtonProps) variantClasses() string {
	switch b.Variant {
	case Destructive:
		return "bg-destructive text-destructive-foreground hover:bg-destructive/90"
	case Outline:
		return "border border-input bg-background hover:bg-accent hover:text-accent-foreground"
	case Secondary:
		return "bg-secondary text-secondary-foreground hover:bg-secondary/80"
	case Ghost:
		return "hover:bg-accent hover:text-accent-foreground"
	case Link:
		return "text-primary underline-offset-4 hover:underline"
	default:
		return "bg-primary text-primary-foreground hover:bg-primary/90"
	}
}

// sizeClasses maps sizes to their CSS classes
func (b ButtonProps) sizeClasses() string {
	switch b.Size {
	case Sm:
		return "h-9 px-3 rounded-md"
	case Lg:
		return "h-11 px-8 rounded-md"
	case ButtonIcon:
		return "h-10 w-10"
	default:
		return "h-10 px-4 py-2 rounded-md"
	}
}

// modifierClasses generates additional utility classes
func (b ButtonProps) modifierClasses() string {
	classes := []string{}
	if b.FullWidth {
		classes = append(classes, "w-full")
	}
	return strings.Join(classes, " ")
}

// Button renders an interactive button or link component with consistent styling.
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/button
//
// Props:
// - Class: Additional CSS classes
// - Text: Button label text
// - Variant: Visual style (default, destructive, outline, etc)
// - Size: Button dimensions (sm, md, lg, icon)
// - FullWidth: Expand to fill container
// - Href: Optional URL for link buttons
// - Target: Link target attribute
// - Disabled: Interactivity state
// - Type: Button type attribute
// - Attributes: Additional HTML attributes
// - IconLeft: Icon component before text
// - IconRight: Icon component after text
templ Button(props ButtonProps) {
	if props.Href != "" {
		<a
			href={ templ.SafeURL(props.Href) }
			target={ props.Target }
			class={
				utils.TwMerge(
					"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors",
					"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
					props.variantClasses(),
					props.sizeClasses(),
					props.modifierClasses(),
					props.Class,
				),
			}
			if props.Disabled != nil {
				if disabledBool, ok := props.Disabled.(bool); ok && disabledBool {
					aria-disabled="true"
				}
				if disabledStr, ok := props.Disabled.(string); ok {
					:aria-disabled={ disabledStr }
				}
			}
			{ props.Attributes... }
		>
			{ children... }
			@renderButtonContent(props)
		</a>
	} else {
		<button
			class={
				utils.TwMerge(
					"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors",
					"focus-visible:outline-none focus-visible:ring-2 focus-ring-ring focus-visible:ring-offset-2",
					"disabled:pointer-events-none disabled:opacity-50",
					props.variantClasses(),
					props.sizeClasses(),
					props.modifierClasses(),
					props.Class,
				),
			}
			if props.Type != "" {
				type={ props.Type }
			}
			if props.Disabled != nil {
				if disabledBool, ok := props.Disabled.(bool); ok {
					disabled?={ disabledBool }
				}
				if disabledStr, ok := props.Disabled.(string); ok {
					:disabled={ disabledStr }
				}
			}
			{ props.Attributes... }
		>
			{ children... }
			@renderButtonContent(props)
		</button>
	}
}

// renderButtonContent arranges button text and icons
templ renderButtonContent(props ButtonProps) {
	<span class="flex gap-2 items-center">
		if props.IconLeft != nil {
			@props.IconLeft
		}
		{ props.Text }
		if props.IconRight != nil {
			@props.IconRight
		}
	</span>
}
