package components

import (
	"fmt"
	"github.com/axzilla/goilerplate/pkg/icons"
	"github.com/axzilla/goilerplate/pkg/utils"
	"strings"
)

type DropdownMenuItem struct {
	// Label displays text for the menu item
	Label string

	// Value for non-link menu items
	Value string

	// Href makes item a navigation link
	Href string

	// Target controls link opening behavior
	Target string

	// IconLeft displays icon before label
	IconLeft templ.Component

	// IconRight displays icon after label
	IconRight templ.Component

	// SubItems creates nested submenu
	SubItems []DropdownMenuItem

	// Disabled controls interactive state
	Disabled bool

	// Attributes for additional HTML attributes
	Attributes templ.Attributes
}

type DropdownMenuProps struct {
	// Items defines the menu structure
	Items []DropdownMenuItem

	// Trigger overrides default button trigger
	Trigger templ.Component

	// Class adds custom CSS classes
	Class string

	// Position sets preferred menu placement (left, right, top, bottom)
	Position string
}

// ModifierClasses generates state-based CSS classes
func (d DropdownMenuItem) ModifierClasses() string {
	classes := []string{}
	if d.Disabled {
		classes = append(classes, "text-muted-foreground cursor-not-allowed")
	} else {
		classes = append(classes, "text-foreground hover:bg-accent hover:text-accent-foreground")
	}
	return strings.Join(classes, " ")
}

// renderMenuItem handles recursive menu item rendering
// Supports regular items, links, and nested submenus up to 3 levels
templ renderMenuItem(item DropdownMenuItem, index int, depth int) {
	if len(item.SubItems) > 0 {
		<div class="relative group">
			<button
				class={
					utils.TwMerge(
						"w-full text-left flex items-center justify-between px-4 py-2 text-sm",
						item.ModifierClasses(),
					),
				}
				role="menuitem"
				tabindex="-1"
				id={ fmt.Sprintf("menu-item-%d", index) }
				aria-haspopup="true"
				aria-expanded="false"
				disabled?={ item.Disabled }
				{ item.Attributes... }
			>
				<span class="flex items-center gap-2">
					if item.IconLeft != nil {
						@item.IconLeft
					}
					{ item.Label }
				</span>
				if item.IconRight != nil {
					@item.IconRight
				} else {
					@icons.ChevronRight(icons.IconProps{Size: "16"})
				}
			</button>
			if depth < 3 {
				<div class="absolute left-full top-0 hidden group-hover:block">
					<div class="py-1 bg-popover rounded-md shadow-lg border border-border">
						for subIndex, subItem := range item.SubItems {
							@renderMenuItem(subItem, subIndex, depth+1)
						}
					</div>
				</div>
			}
		</div>
	} else if item.Href != "" {
		<a
			href={ templ.SafeURL(item.Href) }
			target={ item.Target }
			class={
				"block px-4 py-2 text-sm flex items-center",
				templ.KV("text-foreground hover:bg-accent hover:text-accent-foreground", !item.Disabled),
				templ.KV("text-muted-foreground cursor-not-allowed", item.Disabled),
			}
			role="menuitem"
			tabindex="-1"
			id={ fmt.Sprintf("menu-item-%d", index) }
			{ item.Attributes... }
		>
			<span class="flex items-center gap-2">
				if item.IconLeft != nil {
					@item.IconLeft
				}
				{ item.Label }
			</span>
			if item.IconRight != nil {
				<span class="ml-auto">
					@item.IconRight
				</span>
			}
		</a>
	} else {
		<button
			class={
				"w-full text-left flex items-center justify-between px-4 py-2 text-sm",
				templ.KV("text-foreground hover:bg-accent hover:text-accent-foreground", !item.Disabled),
				templ.KV("text-muted-foreground cursor-not-allowed", item.Disabled),
			}
			role="menuitem"
			tabindex="-1"
			id={ fmt.Sprintf("menu-item-%d", index) }
			disabled?={ item.Disabled }
			{ item.Attributes... }
		>
			<span class="flex items-center gap-2">
				if item.IconLeft != nil {
					@item.IconLeft
				}
				{ item.Label }
			</span>
			if item.IconRight != nil {
				@item.IconRight
			}
		</button>
	}
}

// DropdownMenu renders a customizable popup menu with positioning and nesting support.
// Uses Alpine.js for interactions and supports keyboard navigation.
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/dropdown-menu
//
// Props:
// - Items: Menu structure and content
// - Trigger: Custom trigger element (optional)
// - Class: Additional CSS classes
// - Position: Preferred placement
//
// Features:
// - Nested submenus (up to 3 levels)
// - Automatic position adjustment
// - Keyboard navigation
// - ARIA support
templ DropdownMenu(props DropdownMenuProps) {
	<div
		x-data="{ 
			open: false,
			position: $el.dataset.position,
			verticalPosition: 'bottom',
			updatePosition() {
				const menu = this.$refs.menu;
				const rect = menu.getBoundingClientRect();
				const viewportWidth = window.innerWidth || document.documentElement.clientWidth;
				const viewportHeight = window.innerHeight || document.documentElement.clientHeight;
				
				if (this.position === 'left' && rect.left < 0) {
					this.position = 'right';
				} else if (this.position !== 'left' && rect.right > viewportWidth) {
					this.position = 'left';
				}

				if (this.verticalPosition === 'bottom' && rect.bottom > viewportHeight) {
					this.verticalPosition = 'top';
				} else if (this.verticalPosition === 'top' && rect.top < 0) {
					this.verticalPosition = 'bottom';
				}
			}
		}"
		@resize.window="if (open) updatePosition()"
		class={ utils.TwMerge("relative inline-block text-left", props.Class) }
		data-position={ props.Position }
	>
		<div @click="open = !open; if(open) $nextTick(() => updatePosition())">
			if props.Trigger != nil {
				@props.Trigger
			} else {
				@Button(ButtonProps{
					Text:      "Options",
					Variant:   "outline",
					IconRight: icons.ChevronDown(icons.IconProps{Size: "16"}),
				})
			}
		</div>
		<div
			x-ref="menu"
			x-show="open"
			@click.away="open = false"
			@keydown.escape.window="open = false"
			x-transition:enter="transition ease-out duration-100"
			x-transition:enter-start="transform opacity-0 scale-95"
			x-transition:enter-end="transform opacity-100 scale-100"
			x-transition:leave="transition ease-in duration-75"
			x-transition:leave-start="transform opacity-100 scale-100"
			x-transition:leave-end="transform opacity-0 scale-95"
			class={
				"absolute z-50 mt-2 w-56 rounded-md shadow-lg bg-popover ring-1 ring-black ring-opacity-5 focus:outline-none",
				"border border-border",
			}
			:class="{
				'right-0': position === 'left',
				'left-0': position !== 'left',
				'bottom-full mb-2': verticalPosition === 'top',
				'top-full mt-2': verticalPosition === 'bottom'
			}"
			role="menu"
			aria-orientation="vertical"
			aria-labelledby="dropdown-menu-button"
			tabindex="-1"
		>
			<div class="py-1" role="none">
				for index, item := range props.Items {
					@renderMenuItem(item, index, 0)
				}
			</div>
		</div>
	</div>
}
