package components

type Tab struct {
	// ID uniquely identifies the tab
	ID string

	// Title displays in tab button
	Title string

	// Content renders when tab is active
	Content templ.Component
}

type TabsProps struct {
	// Tabs defines the tabs structure and content
	Tabs []Tab

	// TabsContainerClass adds classes to tabs header
	TabsContainerClass string

	// ContentContainerClass adds classes to content area
	ContentContainerClass string
}

// Tabs renders a tabbed interface with animated transitions.
// Uses Alpine.js for state management and interactions.
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/tabs
//
// Props:
// - Tabs: Tab definitions and content
// - TabsContainerClass: Additional classes for header
// - ContentContainerClass: Additional classes for content
//
// Features:
// - Animated tab switching
// - Keyboard navigation
// - Responsive layout
// - ARIA support
templ Tabs(props TabsProps) {
	<div
		x-data="{     
      tabSelected: '1',
      tabId: $id('tabs'),
      tabButtonClicked(tabButton) {
        this.tabSelected = tabButton.id.replace(this.tabId + '-', '');
        this.tabRepositionMarker(tabButton);
      },
      tabRepositionMarker(tabButton) {
        this.$refs.tabMarker.style.width = tabButton.offsetWidth + 'px';
        this.$refs.tabMarker.style.height = tabButton.offsetHeight + 'px';
        this.$refs.tabMarker.style.left = tabButton.offsetLeft + 'px';
      },
      tabContentActive(tabContent) {
        return this.tabSelected === tabContent.id.replace(this.tabId + '-content-', '');
      }
    }"
		x-init="$nextTick(() => tabRepositionMarker($refs.tabButtons.firstElementChild));"
		class="relative"
	>
		<!-- Tabs buttons container -->
		<div
			x-ref="tabButtons"
			class={ "relative flex items-center justify-center h-10 p-1 rounded-lg select-none",
				"bg-muted text-muted-foreground",
				props.TabsContainerClass }
		>
			<!-- Individual tab buttons -->
			for _, tab := range props.Tabs {
				<button
					:id="$id(tabId)"
					@click="tabButtonClicked($el);"
					type="button"
					class="relative z-20 flex-1 inline-flex items-center justify-center h-8 px-3 text-sm font-medium transition-all rounded-md cursor-pointer whitespace-nowrap"
					:class="{'text-foreground bg-background shadow-sm': tabSelected === '{tab.ID}', 'hover:text-foreground': tabSelected !== '{tab.ID}'}"
				>
					{ tab.Title }
				</button>
			}
			<!-- Active tab marker -->
			<div x-ref="tabMarker" class="absolute left-0 z-10 h-full duration-300 ease-out" x-cloak>
				<div class="w-full h-full bg-background rounded-md shadow-sm"></div>
			</div>
		</div>
		<!-- Tab content container -->
		<div class={ "relative mt-2 content", props.ContentContainerClass }>
			<!-- Individual tab content -->
			for _, tab := range props.Tabs {
				<div
					:id="$id(tabId + '-content')"
					x-show="tabContentActive($el)"
					class="relative"
					x-cloak
				>
					@tab.Content
				</div>
			}
		</div>
	</div>
}
