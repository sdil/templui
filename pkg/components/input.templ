package components

import "github.com/axzilla/goilerplate/pkg/utils"

// InputType defines the available input field types
type InputType string

const (
	// Standard text inputs
	InputTypeText     InputType = "text"
	InputTypePassword InputType = "password"
	InputTypeEmail    InputType = "email"
	InputTypeNumber   InputType = "number"
	InputTypeTel      InputType = "tel"
	InputTypeURL      InputType = "url"
	InputTypeSearch   InputType = "search"

	// Date and time inputs
	InputTypeDate InputType = "date"
	InputTypeTime InputType = "time"

	// File upload input
	InputTypeFile InputType = "file"
)

type InputProps struct {
	// Type sets the input field behavior
	Type InputType

	// Placeholder shows helper text when empty
	Placeholder string

	// Value sets the current input content
	Value string

	// Name sets the form field name
	Name string

	// ID uniquely identifies the input
	ID string

	// Label displays text above input
	Label string

	// Description shows helper text below input
	Description string

	// Error displays validation message
	Error string

	// Class adds custom CSS classes
	Class string

	// FileAccept limits allowed file types
	// Only used when Type is InputTypeFile
	FileAccept string

	// Attributes for additional HTML attributes and Alpine.js bindings
	Attributes templ.Attributes
}

// Input renders a form input field with optional label and validation.
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/input
//
// Props:
// - Type: Input field behavior type
// - Placeholder: Helper text when empty
// - Value: Current input value
// - Name: Form field name
// - ID: Unique identifier
// - Label: Text label
// - Description: Helper text
// - Error: Validation message
// - Class: Additional CSS classes
// - FileAccept: Allowed file types
// - Attributes: Additional HTML attributes
templ Input(props InputProps) {
	<span class="space-y-2">
		if props.Label != "" {
			<label
				for={ props.ID }
				class={ "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",   
      templ.KV("text-destructive", len(props.Error)>0) }
			>
				{ props.Label }
			</label>
		}
		<input
			type={ string(props.Type) }
			placeholder={ props.Placeholder }
			name={ props.Name }
			value={ props.Value }
			id={ props.ID }
			class={
				utils.TwMerge("flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background",
					"file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground",
					"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
					"disabled:cursor-not-allowed disabled:opacity-50",
					"file:text-foreground dark:file:text-foreground",
					props.Class),
			}
			if props.Type == InputTypeFile {
				accept={ props.FileAccept }
			}
			{ props.Attributes... }
		/>
		if props.Description != "" {
			<p class="text-sm text-muted-foreground m-0">{ props.Description }</p>
		}
		if props.Error != "" {
			<p class="text-sm font-medium text-destructive">{ props.Error }</p>
		}
	</span>
}
