package components

import (
	"github.com/axzilla/goilerplate/pkg/icons"
	"github.com/axzilla/goilerplate/pkg/utils"
)

type DatepickerProps struct {
	// ID uniquely identifies the datepicker input
	ID string

	// Name sets the form field name
	Name string

	// Placeholder shows helper text when empty
	Placeholder string

	// Format controls date string presentation
	// Supported formats:
	// - "M d, Y" (Jan 1, 2024)
	// - "MM-DD-YYYY" (01-01-2024)
	// - "DD-MM-YYYY" (01-01-2024)
	// - "YYYY-MM-DD" (2024-01-01)
	// - "D d M, Y" (Mon 1 Jan, 2024)
	Format string

	// Class adds custom CSS classes
	Class string

	// Attributes for additional HTML attributes and Alpine.js bindings
	Attributes templ.Attributes
}

// Datepicker renders a calendar input component with popup date selection.
// Uses Alpine.js for interactions and supports dark mode via Tailwind.
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/datepicker
//
// Props:
// - ID: Unique identifier for the input
// - Name: Form field name
// - Placeholder: Helper text when empty
// - Format: Date display format
// - Class: Additional CSS classes
// - Attributes: Additional HTML attributes
templ Datepicker(props DatepickerProps) {
	<div
		data-date-format={ props.Format }
		x-data="{
      datePickerOpen: false,
      datePickerValue: '',
      datePickerFormat: $el.getAttribute('data-date-format'),
      datePickerMonth: '',
      datePickerYear: '',
      datePickerDay: '',
      datePickerDaysInMonth: [],
      datePickerBlankDaysInMonth: [],
      datePickerMonthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      datePickerDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      position: 'bottom',
      toggleDatePicker() {
          this.datePickerOpen = !this.datePickerOpen;
          if (this.datePickerOpen) {
              this.$nextTick(() => this.updatePosition());
          }
      },
      updatePosition() {
          const trigger = this.$refs.datePickerInput;
          const popup = this.$refs.datePickerPopup;
          const rect = trigger.getBoundingClientRect();
          const popupRect = popup.getBoundingClientRect();
          const viewportHeight = window.innerHeight || document.documentElement.clientHeight;
          
          if (rect.bottom + popupRect.height > viewportHeight && rect.top > popupRect.height) {
              this.position = 'top';
          } else {
              this.position = 'bottom';
          }
      },
      datePickerDayClicked(day) {
        let selectedDate = new Date(this.datePickerYear, this.datePickerMonth, day);
        this.datePickerDay = day;
        this.datePickerValue = this.datePickerFormatDate(selectedDate);
        this.datePickerIsSelectedDate(day);
        this.datePickerOpen = false;
      },
      datePickerPreviousMonth(){
        if (this.datePickerMonth == 0) { 
            this.datePickerYear--; 
            this.datePickerMonth = 11; 
        } else {
            this.datePickerMonth--;
        }
        this.datePickerCalculateDays();
      },
      datePickerNextMonth(){
        if (this.datePickerMonth == 11) { 
            this.datePickerMonth = 0; 
            this.datePickerYear++; 
        } else { 
            this.datePickerMonth++; 
        }
        this.datePickerCalculateDays();
      },
      datePickerIsSelectedDate(day) {
        const d = new Date(this.datePickerYear, this.datePickerMonth, day);
        return this.datePickerValue === this.datePickerFormatDate(d) ? true : false;
      },
      datePickerIsToday(day) {
        const today = new Date();
        const d = new Date(this.datePickerYear, this.datePickerMonth, day);
        return today.toDateString() === d.toDateString() ? true : false;
      },
      datePickerCalculateDays() {
        let daysInMonth = new Date(this.datePickerYear, this.datePickerMonth + 1, 0).getDate();
        let dayOfWeek = new Date(this.datePickerYear, this.datePickerMonth).getDay();
        let blankdaysArray = [];
        for (var i = 1; i <= dayOfWeek; i++) {
            blankdaysArray.push(i);
        }
        let daysArray = [];
        for (var i = 1; i <= daysInMonth; i++) {
            daysArray.push(i);
        }
        this.datePickerBlankDaysInMonth = blankdaysArray;
        this.datePickerDaysInMonth = daysArray;
      },
      datePickerFormatDate(date) {
        let formattedDay = this.datePickerDays[date.getDay()];
        let formattedDate = ('0' + date.getDate()).slice(-2);
        let formattedMonth = this.datePickerMonthNames[date.getMonth()];
        let formattedMonthShortName = this.datePickerMonthNames[date.getMonth()].substring(0, 3);
        let formattedMonthInNumber = ('0' + (parseInt(date.getMonth()) + 1)).slice(-2);
        let formattedYear = date.getFullYear();

        if (this.datePickerFormat === 'M d, Y') {
          return `${formattedMonthShortName} ${formattedDate}, ${formattedYear}`;
        }
        if (this.datePickerFormat === 'MM-DD-YYYY') {
          return `${formattedMonthInNumber}-${formattedDate}-${formattedYear}`;
        }
        if (this.datePickerFormat === 'DD-MM-YYYY') {
          return `${formattedDate}-${formattedMonthInNumber}-${formattedYear}`;
        }
        if (this.datePickerFormat === 'YYYY-MM-DD') {
          return `${formattedYear}-${formattedMonthInNumber}-${formattedDate}`;
        }
        if (this.datePickerFormat === 'D d M, Y') {
          return `${formattedDay} ${formattedDate} ${formattedMonthShortName} ${formattedYear}`;
        }
        
        return `${formattedMonth} ${formattedDate}, ${formattedYear}`;
      },
    }"
		x-init="
        currentDate = new Date();
        datePickerMonth = currentDate.getMonth();
        datePickerYear = currentDate.getFullYear();
        datePickerDay = currentDate.getDate();
        datePickerValue = datePickerFormatDate(currentDate);
        datePickerCalculateDays();
    "
		class={ utils.TwMerge("relative", props.Class) }
		@resize.window="if (datePickerOpen) updatePosition()"
	>
		<div class="relative">
			<input
				type="text"
				id={ props.ID }
				name={ props.Name }
				placeholder={ props.Placeholder }
				x-modelable="datePickerValue"
				@click="toggleDatePicker()"
				x-on:keydown.escape="datePickerOpen = false"
				x-ref="datePickerInput"
				class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
				readonly
				{ props.Attributes... }
			/>
			<div
				@click="toggleDatePicker()"
				class="absolute top-0 right-0 px-3 py-2 cursor-pointer text-muted-foreground hover:text-foreground"
			>
				@icons.Calendar(icons.IconProps{})
			</div>
		</div>
		<div
			x-show="datePickerOpen"
			x-transition:enter="transition ease-out duration-100"
			x-transition:enter-start="transform opacity-0 scale-95"
			x-transition:enter-end="transform opacity-100 scale-100"
			x-transition:leave="transition ease-in duration-75"
			x-transition:leave-start="transform opacity-100 scale-100"
			x-transition:leave-end="transform opacity-0 scale-95"
			@click.away="datePickerOpen = false"
			x-ref="datePickerPopup"
			:class="{
                'top-full mt-1': position === 'bottom',
                'bottom-full mb-1': position === 'top'
            }"
			class="absolute left-0 z-50 w-64 p-4 mt-1 antialiased bg-popover text-popover-foreground border rounded-lg shadow border-border"
		>
			<div class="flex items-center justify-between mb-2">
				<div>
					<span x-text="datePickerMonthNames[datePickerMonth]" class="text-lg font-bold"></span>
					<span x-text="datePickerYear" class="ml-1 text-lg font-normal text-muted-foreground"></span>
				</div>
				<div>
					<button @click="datePickerPreviousMonth()" type="button" class="inline-flex p-1 transition duration-100 ease-in-out rounded-full cursor-pointer focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 hover:bg-accent hover:text-accent-foreground">
						@icons.ChevronLeft(icons.IconProps{Size: "16", Class: "text-muted-foreground"})
					</button>
					<button @click="datePickerNextMonth()" type="button" class="inline-flex p-1 transition duration-100 ease-in-out rounded-full cursor-pointer focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 hover:bg-accent hover:text-accent-foreground">
						@icons.ChevronRight(icons.IconProps{Size: "16", Class: "text-muted-foreground"})
					</button>
				</div>
			</div>
			<div class="grid grid-cols-7 mb-3">
				<template x-for="(day, index) in datePickerDays" :key="index">
					<div class="px-0.5">
						<div x-text="day" class="text-xs font-medium text-center text-muted-foreground"></div>
					</div>
				</template>
			</div>
			<div class="grid grid-cols-7">
				<template x-for="blankDay in datePickerBlankDaysInMonth">
					<div class="p-1 text-sm text-center border border-transparent"></div>
				</template>
				<template x-for="(day, dayIndex) in datePickerDaysInMonth" :key="dayIndex">
					<div class="px-0.5 mb-1 aspect-square">
						<div
							x-text="day"
							@click="datePickerDayClicked(day)"
							:class="{
                'bg-muted text-muted-foreground': datePickerIsToday(day) == true, 
                'text-foreground hover:bg-accent hover:text-accent-foreground': datePickerIsToday(day) == false && datePickerIsSelectedDate(day) == false,
                'bg-primary text-primary-foreground hover:bg-primary/90': datePickerIsSelectedDate(day) == true
              }"
							class="flex items-center justify-center text-sm leading-none text-center rounded-full cursor-pointer h-7 w-7"
						></div>
					</div>
				</template>
			</div>
		</div>
	</div>
}
