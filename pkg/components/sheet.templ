package components

// SheetSide defines the slide-in direction
type SheetSide string

const (
	// Sheet appearance directions
	Top    SheetSide = "top"    // Slides down from top
	Right  SheetSide = "right"  // Slides in from right
	Bottom SheetSide = "bottom" // Slides up from bottom
	Left   SheetSide = "left"   // Slides in from left
)

type SheetProps struct {
	// Title displays in sheet header
	Title string

	// Description shows below title
	Description string

	// Side controls slide-in direction
	Side SheetSide
}

// SheetRoot initializes Alpine.js state and event handlers
// Must wrap Sheet components and triggers
templ SheetRoot() {
	<div
		x-data="{ 
            isOpen: false,
            side: '',
            open(newSide) { 
                this.side = newSide; 
                this.isOpen = true; 
            },
            close() { 
                this.isOpen = false; 
            }
        }"
		@keydown.escape.window="close()"
	>
		{ children... }
	</div>
}

// Sheet renders a slide-in panel with backdrop.
// Uses Alpine.js for animations and state management.
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/sheet
//
// Props:
// - Title: Header text
// - Description: Subheading text
// - Side: Slide-in direction
//
// Features:
// - Responsive sizing
// - Animated transitions
// - Backdrop blur
// - ESC key closing
templ Sheet(props SheetProps) {
	<!-- Backdrop -->
	<div
		x-show="isOpen"
		class="fixed inset-0 bg-background/80 backdrop-blur-sm"
		@click="close()"
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-300"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
	></div>
	<!-- Sheet -->
	<div
		x-show="isOpen"
		class="z-50"
		:class="{
            'fixed inset-y-0 right-0 w-3/4 md:w-1/2 lg:w-1/3': side === 'right',
            'fixed inset-y-0 left-0 w-3/4 md:w-1/2 lg:w-1/3': side === 'left',
            'fixed inset-x-0 top-0 h-auto sm:h-1/2': side === 'top',
            'fixed inset-x-0 bottom-0 h-auto sm:h-1/2': side === 'bottom'
        }"
		x-transition:enter="transition ease-out duration-300"
		x-transition:leave="transition ease-in duration-300"
		if props.Side == Left {
			x-transition:enter-start="opacity-0 transform -translate-x-full"
			x-transition:enter-end="opacity-100 transform translate-x-0"
			x-transition:leave-start="opacity-100 transform translate-x-0"
			x-transition:leave-end="opacity-0 transform -translate-x-full"
		}
		if props.Side == Right {
			x-transition:enter-start="opacity-0 transform translate-x-full"
			x-transition:enter-end="opacity-100 transform translate-x-0"
			x-transition:leave-start="opacity-100 transform translate-x-0"
			x-transition:leave-end="opacity-0 transform translate-x-full"
		}
		if props.Side == Top {
			x-transition:enter-start="opacity-0 transform -translate-y-full"
			x-transition:enter-end="opacity-100 transform translate-y-0"
			x-transition:leave-start="opacity-100 transform translate-y-0"
			x-transition:leave-end="opacity-0 transform -translate-y-full"
		}
		if props.Side == Bottom {
			x-transition:enter-start="opacity-0 transform translate-y-full"
			x-transition:enter-end="opacity-100 transform translate-y-0"
			x-transition:leave-start="opacity-100 transform translate-y-0"
			x-transition:leave-end="opacity-0 transform translate-y-full"
		}
	>
		<div
			class={ "h-full overflow-y-auto bg-background p-6 shadow-lg",
        templ.KV("border-l", props.Side == Right),
        templ.KV("border-r", props.Side == Left),
        templ.KV("border-t", props.Side == Bottom),
        templ.KV("border-b", props.Side == Top) }
		>
			<div class="flex flex-col space-y-2">
				<h2 class="text-lg font-semibold">{ props.Title }</h2>
				<p class="text-sm text-muted-foreground">{ props.Description }</p>
			</div>
			<div class="mt-4">
				{ children... }
			</div>
		</div>
	</div>
}

// SheetTrigger creates elements that open the sheet
// Must be used within SheetRoot
templ SheetTrigger(text string, side SheetSide) {
	<span
		@click={ "open('" + string(side) + "')" }
	>
		{ children... }
	</span>
}

// SheetClose creates a button that closes the sheet
// Must be used within Sheet
templ SheetClose(text string) {
	<button
		@click="close()"
		class={ "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background",
      "transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      "disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent",
      "hover:text-accent-foreground h-10 px-4 py-2" }
	>
		{ text }
	</button>
}
